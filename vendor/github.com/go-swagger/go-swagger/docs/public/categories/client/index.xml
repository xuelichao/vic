<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Client on go-swagger toolkit</title>
    <link>//goswagger.io/categories/client/</link>
    <description>Recent content in Client on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 go-swagger contributors</copyright>
    <lastBuildDate>Fri, 23 Oct 2015 22:11:54 -0700</lastBuildDate>
    <atom:link href="//goswagger.io/categories/client/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generate an API client</title>
      <link>//goswagger.io/generate/client/</link>
      <pubDate>Fri, 23 Oct 2015 22:11:54 -0700</pubDate>
      
      <guid>//goswagger.io/generate/client/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a client.&lt;/p&gt;

&lt;h2 id=&#34;usage:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;There is an example client in &lt;a href=&#34;https://github.com/go-swagger/go-swagger/tree/master/examples/todo-list/client&#34;&gt;https://github.com/go-swagger/go-swagger/tree/master/examples/todo-list/client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To generate a client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate client -f [http-url|filepath] -A [application-name] [--principal [principal-name]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to debug what the client is sending and receiving you can set the environment value DEBUG to a non-empty
value.&lt;/p&gt;

&lt;p&gt;Use a default client, which has an HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {

  // make the request to get all items
  resp, err := apiclient.Default.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client runtime allows for a number of &lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#Runtime&#34;&gt;configuration
options&lt;/a&gt; to be set.&lt;br /&gt;
To then use the client, and override the host, with a HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;https://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/todo-list/swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the transport
  transport := httptransport.New(doc)
  // configure the host
  if os.Getenv(&amp;quot;TODOLIST_HOST&amp;quot;) != &amp;quot;&amp;quot; {
    transport.Host = os.Getenv(&amp;quot;TODOLIST_HOST&amp;quot;)
  }

  // create the API client, with the transport
  client := apiclient.New(transport, strfmt.Default)

  // to override the host for the default client
  // apiclient.Default.SetTransport(transport)

  // make the request to get all items
  resp, err := client.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;authentication:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;The client supports 3 authentication schemes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#BasicAuth&#34;&gt;Basic Auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#APIKeyAuth&#34;&gt;API key auth in header or query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#BearerToken&#34;&gt;Bearer token header for oauth2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;./swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the API client
  client := apiclient.New(httptransport.New(doc), strfmt.Default)

  // make the authenticated request to get all items
  bearerTokenAuth := httptransport.BearerToken(os.Getenv(&amp;quot;API_ACCESS_TOKEN&amp;quot;))
  // basicAuth := httptransport.BasicAuth(os.Getenv(&amp;quot;API_USER&amp;quot;), os.Getenv(&amp;quot;API_PASSWORD&amp;quot;))
  // apiKeyQueryAuth := httptransport.APIKeyAuth(&amp;quot;apiKey&amp;quot;, &amp;quot;query&amp;quot;, os.Getenv(&amp;quot;API_KEY&amp;quot;))
  // apiKeyHeaderAuth := httptransport.APIKeyAuth(&amp;quot;X-API-TOKEN&amp;quot;, &amp;quot;header&amp;quot;, os.Getenv(&amp;quot;API_KEY&amp;quot;))
  resp, err := client.Operations.All(operations.AllParams{}, bearerTokenAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, basicAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyQueryAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyHeaderAuth)
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>