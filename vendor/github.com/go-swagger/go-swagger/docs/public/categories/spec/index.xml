<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spec on go-swagger toolkit</title>
    <link>//goswagger.io/categories/spec/</link>
    <description>Recent content in Spec on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 go-swagger contributors</copyright>
    <lastBuildDate>Sun, 22 Nov 2015 23:21:52 -0800</lastBuildDate>
    <atom:link href="//goswagger.io/categories/spec/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dynamic API definition</title>
      <link>//goswagger.io/tutorial/dynamic/</link>
      <pubDate>Sun, 22 Nov 2015 23:21:52 -0800</pubDate>
      
      <guid>//goswagger.io/tutorial/dynamic/</guid>
      <description>&lt;p&gt;The toolkit supports building a swagger specification entirely with go code. It does allow you to serve a spec up quickly. This is one of the building blocks required to serve up stub API&amp;rsquo;s and to generate a test server with predictable responses, however this is not as bad as it sounds&amp;hellip;&lt;/p&gt;

&lt;p&gt;This tutorial uses the todo list application to serve a swagger based API defined entirely in go code.
Because we know what we want the spec to look like, first we&amp;rsquo;ll just build the entire spec with the interal dsl.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;doc := spec.NewSwagger(&amp;quot;&amp;quot;)
doc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>swagger:meta</title>
      <link>//goswagger.io/generate/spec/meta/</link>
      <pubDate>Sat, 14 Nov 2015 19:54:53 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/meta/</guid>
      <description>

&lt;p&gt;The &lt;strong&gt;swagger:meta&lt;/strong&gt; annotation flags a file as source for metadata about the API.
This is typically a doc.go file with your package documentation.&lt;/p&gt;

&lt;p&gt;You can specify a Consumes and Produces key which has a new content type on each line
Schemes is a tag that is required and allows for a comma separated string composed of:
http, https, ws or wss&lt;/p&gt;

&lt;p&gt;Host and BasePath can be specified but those values will be defaults,
they should get substituted when serving the swagger spec.&lt;/p&gt;

&lt;p&gt;The description property uses the rest of the comment block as description for the api when not explictily provided&lt;/p&gt;

&lt;h5 id=&#34;syntax:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:meta
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Terms Of Service&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;allows for either a url or a free text definition describing the terms of services for the API&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of default (global) mime type values, one per line, for the content the API receives&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Produces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of default (global) mime type values, one per line, for the conten the API sends&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Schemes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of default schemes the API accept (possible values: http, https, ws, wss) https is preferred as default when configured&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the current version of the API&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the host from where the spec is served&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Base path&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the default base path for this API&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Contact&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the name of for the person to contact concerning the API eg. John Doe&amp;nbsp;&amp;lt;john@blogs.com&amp;gt;&amp;nbsp;&lt;a href=&#34;http://john.blogs.com&#34;&gt;http://john.blogs.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the name of the license followed by the URL of the license eg. MIT &lt;a href=&#34;http://opensource.org/license/MIT&#34;&gt;http://opensource.org/license/MIT&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Package classification Petstore API.
//
// the purpose of this application is to provide an application
// that is using plain go code to define an API
//
// This should demonstrate all the possible comment annotations
// that are available to turn go code into a fully compliant swagger 2.0 spec
//
// Terms Of Service:
//
// there are no TOS at this moment, use at your own risk we take no responsibility
//
//     Schemes: http, https
//     Host: localhost
//     BasePath: /v2
//     Version: 0.0.1
//     License: MIT http://opensource.org/licenses/MIT
//     Contact: John Doe&amp;lt;john.doe@example.com&amp;gt; http://john.doe.com
//
//     Consumes:
//     - application/json
//     - application/xml
//
//     Produces:
//     - application/json
//     - application/xml
//
//
// swagger:meta
package classification
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
swagger: &#39;2.0&#39;
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
schemes:
  - http
  - https
info:
  description: &amp;quot;the purpose of this application is to provide an application\nthat is using plain go code to define an API\n\nThis should demonstrate all the possible comment annotations\nthat are available to turn go code into a fully compliant swagger 2.0 spec&amp;quot;
  title: &#39;Petstore API.&#39;
  termsOfService: &#39;there are no TOS at this moment, use at your own risk we take no responsibility&#39;
  contact: {name: &#39;John Doe&#39;, url: &#39;http://john.doe.com&#39;, email: john.doe@example.com}
  license: {name: MIT, url: &#39;http://opensource.org/licenses/MIT&#39;}
  version: 0.0.1
host: localhost
basePath: /v2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:route</title>
      <link>//goswagger.io/generate/spec/route/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:39 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/route/</guid>
      <description>

&lt;p&gt;A &lt;strong&gt;swagger:route&lt;/strong&gt; annotation links a path to a method.
This operation gets a unique id, which is used in various places as method name.
One such usage is in method names for client generation for example.&lt;/p&gt;

&lt;p&gt;Because there are many routers available, this tool does not try to parse the paths
you provided to your routing library of choice. So you have to specify your path pattern
yourself in valid swagger syntax.&lt;/p&gt;

&lt;h5 id=&#34;syntax:657749a60c6862d2709238cb94541743&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:route [method] [path pattern] [?tag1 tag2 tag3] [operation id]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:657749a60c6862d2709238cb94541743&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific mime type values, one per line, for the content the API receives&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Produces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific mime type values, one per line, for the conten the API sends&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Schemes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific schemes the API accept (possible values: http, https, ws, wss) https is preferred as default when configured&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a dictionary of key: []string{scopes}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Responses&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a dictionary of status code to named response&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:657749a60c6862d2709238cb94541743&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ServeAPI serves the API for this record store
func ServeAPI(host, basePath string, schemes []string) error {

	// swagger:route GET /pets listPets pets users
	//
	// Lists pets filtered by some parameters.
	//
	// This will show all available pets by default.
	// You can get the pets that are out of stock
	//
	//     Consumes:
	//     - application/json
	//     - application/x-protobuf
	//
	//     Produces:
	//     - application/json
	//     - application/x-protobuf
	//
	//     Schemes: http, https, ws, wss
	//
	//     Security:
	//       api_key:
	//       oauth: read, write
	//
	//     Responses:
	//       default: genericError
	//       200: someResponse
	//       422: validationError
	mountItem(&amp;quot;GET&amp;quot;, basePath+&amp;quot;/pets&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:657749a60c6862d2709238cb94541743&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
operations:
  &amp;quot;/&amp;quot;:
    get:
      operationId: listPets
      tags:
      - pets
      - users
      consumes:
      - application/json
      - application/x-protobuf
      produces:
      - application/json
      - application/x-protobuf
      schemes:
      - http
      - https
      - ws
      - wss
      security:
        api_key: []
        oauth:
        - read
        - write
      responses:
        default:
          $ref: &amp;quot;#/responses/genericError&amp;quot;
        200:
          $ref: &amp;quot;#/responses/someResponse&amp;quot;
        422:
          $ref: &amp;quot;#/responses/validationError&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:parameters</title>
      <link>//goswagger.io/generate/spec/params/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:43 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/params/</guid>
      <description>

&lt;p&gt;The &lt;strong&gt;swagger:parameters&lt;/strong&gt; annotation links a struct to one or more operations. The parameters in the resulting swagger spec can be composed of several structs.
There are no guarantees given on how property name overlaps are resolved when several structs apply to the same operation.
This tag works very similar to the swagger:model tag except that it produces valid parameter objects instead of schema
objects.&lt;/p&gt;

&lt;p&gt;When this appears anywhere in a comment for a struct, then that struct becomes a schema
in the definitions object of swagger.&lt;/p&gt;

&lt;p&gt;The struct gets analyzed and all the collected models are added to the tree.
The refs are tracked separately so that they can be renamed later on.&lt;/p&gt;

&lt;p&gt;At this moment the parameters require one or more structs to be defined, it&amp;rsquo;s not possible to annotate plain var
entries at this moment.&lt;/p&gt;

&lt;h5 id=&#34;syntax:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:parameters [operationid1 operationid2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Properties:&lt;/h5&gt;

&lt;p&gt;The fields of this struct can be decorated with a number of annotations. For the field name it uses the struct field
name, it respects the json struct field tag for customizing the name.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;In&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;where to find the parameter&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collection Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when a slice the formatter for the collection when serialized on the request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value needs to be present in the request&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// swagger:parameter listBars addBars
type BarSliceParam struct {
	// a BarSlice has bars which are strings
	//
	// min items: 3
	// max items: 10
	// unique: true
	// items.minItems: 4
	// items.maxItems: 9
	// items.items.minItems: 5
	// items.items.maxItems: 8
	// items.items.items.minLength: 3
	// items.items.items.maxLength: 10
	// items.items.items.pattern: \w+
	// collection format: pipe
	// in: query
	BarSlice [][][]string `json:&amp;quot;bar_slice&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
operations:
  &amp;quot;/&amp;quot;:
    get:
      operationId: listBars
      parameters:
        - name: bar_slice
          in: query
          maxItems: 10 
          minItems: 3
          unique: true
          collectionFormat: pipe
          type: array
          items:
            type: array
            maxItems: 9
            minItems: 4
            items:
              type: array
              maxItems: 8
              minItems: 5
              items:
                type: string
                minLength: 3
                maxLength: 10
                pattern: &amp;quot;\\w+&amp;quot;
    post:
      operationId: addBars
      parameters:
        - name: bar_slice
          in: query
          maxItems: 10 
          minItems: 3
          unique: true
          collectionFormat: pipe
          type: array
          items:
            type: array
            maxItems: 9
            minItems: 4
            items:
              type: array
              maxItems: 8
              minItems: 5
              items:
                type: string
                minLength: 3
                maxLength: 10
                pattern: &amp;quot;\\w+&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:response</title>
      <link>//goswagger.io/generate/spec/response/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:52 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/response/</guid>
      <description>

&lt;p&gt;Reads a struct decorated with &lt;strong&gt;swagger:response&lt;/strong&gt; and uses that information to fill up the headers and the schema for a response.
A swagger:route can specify a response name for a status code and then the matching response will be used for that operation in the swagger definition.&lt;/p&gt;

&lt;h5 id=&#34;syntax:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:response [?response name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collection Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when a slice the formatter for the collection when serialized on the request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A ValidationError is an error that is used when the required input fails validation.
// swagger:response validationError
type ValidationError struct {
	// The error message
	// in: body
	Body struct {
		// The validation message
		// 
		// Required: true
		Message string
		// An optional field name to which this validation applies
		FieldName string
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
responses:
  validationError:
    description: A validation error is an errot that is used whn the required input fails validation.
    schema:
      type: object
      required: 
      - Message
      properties:
        Message:
          type: string
          description: The validation message
        FieldName:
          type: string
          description: an optional field name to which this validation applies
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:model</title>
      <link>//goswagger.io/generate/spec/model/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:32 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/model/</guid>
      <description>

&lt;p&gt;A &lt;strong&gt;swagger:model&lt;/strong&gt; annotation optionally gets a model name as extra data on the line.
when this appears anywhere in a comment for a struct, then that struct becomes a schema
in the definitions object of swagger.&lt;/p&gt;

&lt;p&gt;The struct gets analyzed and all the collected models are added to the tree.
The refs are tracked separately so that they can be renamed later on.&lt;/p&gt;

&lt;p&gt;Definitions only appear in the generated spec when they are actually used somewhere in the application (eg. on a params or response struct)&lt;/p&gt;

&lt;h5 id=&#34;syntax:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:model [?model name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value needs to be set on the schema&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Read Only&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value will be marked as read-only and is not required in request bodies&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// User represents the user for this application
//
// A user is the security principal for this application.
// It&#39;s also used as one of main axis for reporting.
//
// A user can have friends with whom they can share what they like.
//
// swagger:model
type User struct {
	// the id for this user
	//
	// required: true
	// min: 1
	ID int64 `json:&amp;quot;id&amp;quot;`

	// the name for this user
	// required: true
	// min length: 3
	Name string `json:&amp;quot;name&amp;quot;`

	// the email address for this user
	//
	// required: true
	Email strfmt.Email `json:&amp;quot;login&amp;quot;`

	// the friends for this user
	Friends []User `json:&amp;quot;friends&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  User:
    type: object
    title: User represents the user for this application
    description: &amp;quot;A user is the security principal for this application.\nIt&#39;s also used as one of the main axis for reporting.\n\nA user can have friends with whom they can share what they like.&amp;quot;
    required:
      - id
      - name
      - login
    properties:
      id:
        description: the id for this user
        type: integer
        format: int64
        minimum: 1
      name:
        description: the name for this user
        type: string
        minLength: 3
      login:
        description: the email address for this user
        type: string
        format: email
        x-go-name: Email
      friends:
        description: the friends for this user
        type: array
        items:
          $ref: &amp;quot;#/definitions/User&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:allOf</title>
      <link>//goswagger.io/generate/spec/allOf/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:58 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/allOf/</guid>
      <description>

&lt;p&gt;Marks an embedded type as  a member for allOf&lt;/p&gt;

&lt;h5 id=&#34;syntax:9e114a42ed516fdef13f2ebb84a2eb20&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:allOf
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;example:9e114a42ed516fdef13f2ebb84a2eb20&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A SimpleOne is a model with a few simple fields
type SimpleOne struct {
	ID   int64  `json:&amp;quot;id&amp;quot;`
	Name string `json:&amp;quot;name&amp;quot;`
	Age  int32  `json:&amp;quot;age&amp;quot;`
}

// A Something struct is used by other structs
type Something struct {
	DID int64  `json:&amp;quot;did&amp;quot;`
	Cat string `json:&amp;quot;cat&amp;quot;`
}

// Notable is a model in a transitive package.
// it&#39;s used for embedding in another model
//
// swagger:model withNotes
type Notable struct {
	Notes string `json:&amp;quot;notes&amp;quot;`

	Extra string `json:&amp;quot;extra&amp;quot;`
}

// An AllOfModel is composed out of embedded structs but it should build
// an allOf property
type AllOfModel struct {
	// swagger:allOf
	SimpleOne
	// swagger:allOf
	mods.Notable

	Something // not annotated with anything, so should be included

	CreatedAt strfmt.DateTime `json:&amp;quot;createdAt&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:9e114a42ed516fdef13f2ebb84a2eb20&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  SimpleOne:
    title: A SimpleOne is a model with a few simple fields
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      age:
        type: integer
        format: int32
  Notable:
    title: &amp;quot;Notable is a model in a transitive package.\nit&#39;s used for embedding in another model&amp;quot;
    type: object
    properties:
      notes:
        type: string
      extra:
        type: string
  AllOfModel:
    title: &amp;quot;An AllOfModel is composed out of embedded structs but it should build\nan allOf property&amp;quot;
    allOf: 
      - $ref: &amp;quot;#/definitions/SimpleOne&amp;quot;
      - $ref: &amp;quot;#/definitions/Notable&amp;quot;
      - title: A Something struct is used by other structs
        type: object
        properties:
          did:
            type: integer
            format: int64
          cat:
            type: string
      - type: object
        properties:
          createdAt:
            type: string
            format: date-time
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:discriminated</title>
      <link>//goswagger.io/generate/spec/discriminated/</link>
      <pubDate>Sat, 12 Dec 2015 20:24:52 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/discriminated/</guid>
      <description>

&lt;p&gt;Marks an embedded type as  a member for allOf and sets the x-class value. On interface definitions there is another annotation on methods allowed &lt;em&gt;swagger:name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The swagger:allOf annotation can be followed by a string. This string will be the value for the &lt;code&gt;x-class&lt;/code&gt; vendor extension. This value is used as constant for the discriminator field.&lt;/p&gt;

&lt;p&gt;An interface that is embedded expects to have 1 method that is commented with &lt;code&gt;Discriminator: true&lt;/code&gt;. That field will be used as discriminator field when marshalling/unmarshalling objects.&lt;/p&gt;

&lt;p&gt;Because this is for use with interfaces we can&amp;rsquo;t make use of the json struct tag to allow for spec name overriding. So instead you can annotate method names on an interface with swagger:name and a value this will then provide the json field name.&lt;/p&gt;

&lt;h5 id=&#34;syntax:776d526ac6d1462856c6cb3611676552&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:allOf org.example.something.TypeName
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;example:776d526ac6d1462856c6cb3611676552&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// TeslaCar is a tesla car
//
// swagger:model
type TeslaCar interface {
	// The model of tesla car
	//
	// discriminator: true
	// swagger:name model
	Model() string

	// AutoPilot returns true when it supports autopilot
	// swagger:name autoPilot
	AutoPilot() bool
}

// The ModelS version of the tesla car
//
// swagger:model modelS
type ModelS struct {
	// swagger:allOf com.tesla.models.ModelS
	TeslaCar
	// The edition of this Model S
	Edition string `json:&amp;quot;edition&amp;quot;`
}

// The ModelX version of the tesla car
//
// swagger:model modelX
type ModelX struct {
	// swagger:allOf com.tesla.models.ModelX
	TeslaCar
	// The number of doors on this Model X
	Doors int32 `json:&amp;quot;doors&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:776d526ac6d1462856c6cb3611676552&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  TeslaCar:
    title: TeslaCar is a tesla car
    type: object
    discriminator: &amp;quot;model&amp;quot;
    properties:
      model:
        description: The model of tesla car
        type: string
        x-go-name: Model
      autoPilot:
        description: AutoPilot returns true when it supports autopilot
        type: integer
        format: int32
        x-go-name: AutoPilot
  modelS:
    allOf:
      - $ref: &amp;quot;#/definitions/TeslaCar&amp;quot;
      - title: The ModelS version of the tesla car
        properties:
          edition:
            description: &amp;quot;The edition of this model S&amp;quot;
            type: string
            x-go-name: Edition
        x-class: &amp;quot;com.tesla.models.ModelS&amp;quot;
        x-go-name: &amp;quot;ModelX&amp;quot;
  modelX:
    allOf:
      - $ref: &amp;quot;#/definitions/TeslaCar&amp;quot;
      - title: The ModelX version of the tesla car
        properties:
          doors:
            description: &amp;quot;The number of doors on this Model X&amp;quot;
            type: integer
            format: int32
            x-go-name: Doors
        x-class: &amp;quot;com.tesla.models.ModelX&amp;quot;
        x-go-name: ModelX
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:strfmt</title>
      <link>//goswagger.io/generate/spec/strfmt/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:24 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/strfmt/</guid>
      <description>

&lt;p&gt;A &lt;strong&gt;swagger:strfmt&lt;/strong&gt; annotation names a type as a string formatter. The name is mandatory and that is
what will be used as format name for this particular string format.
String formats should only be used for &lt;strong&gt;very&lt;/strong&gt; well known formats.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;String formats are well-known items. These imply a common well-documented set of formats that can be validated. The toolkit allows for creating your own string formats too.&lt;/p&gt;

&lt;p&gt;To create a custom string format you need to create a type that implements the (Unm/M)arshalText interfaces and the sql Scan and sql Value interfaces.  The SQL interfaces are not strictly necessary but allow other people to use the string format in structs that are used with databases&lt;/p&gt;

&lt;p&gt;The default string formats for this toolkit are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uuid, uuid3, uuid4, uuid5&lt;/li&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;uri (absolute)&lt;/li&gt;
&lt;li&gt;hostname&lt;/li&gt;
&lt;li&gt;ipv4&lt;/li&gt;
&lt;li&gt;ipv6&lt;/li&gt;
&lt;li&gt;credit card&lt;/li&gt;
&lt;li&gt;isbn, isbn10, isbn13&lt;/li&gt;
&lt;li&gt;social security number&lt;/li&gt;
&lt;li&gt;hexcolor&lt;/li&gt;
&lt;li&gt;rgbcolor&lt;/li&gt;
&lt;li&gt;date&lt;/li&gt;
&lt;li&gt;date-time&lt;/li&gt;
&lt;li&gt;duration&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;custom string formats&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;syntax:2856515fe173bf6a903d614be856ef00&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:strfmt [name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;example:2856515fe173bf6a903d614be856ef00&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func init() {
  eml := Email(&amp;quot;&amp;quot;)
  Default.Add(&amp;quot;email&amp;quot;, &amp;amp;eml, govalidator.IsEmail)
}

// Email represents the email string format as specified by the json schema spec
//
// swagger:strfmt email
type Email string

// MarshalText turns this instance into text
func (e Email) MarshalText() ([]byte, error) {
	return []byte(string(e)), nil
}

// UnmarshalText hydrates this instance from text
func (e *Email) UnmarshalText(data []byte) error { // validation is performed later on
	*e = Email(string(data))
	return nil
}

func (b *Email) Scan(raw interface{}) error {
	switch v := raw.(type) {
	case []byte:
		*b = Email(string(v))
	case string:
		*b = Email(v)
	default:
		return fmt.Errorf(&amp;quot;cannot sql.Scan() strfmt.Email from: %#v&amp;quot;, v)
	}

	return nil
}

func (b Email) Value() (driver.Value, error) {
	return driver.Value(string(b)), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:2856515fe173bf6a903d614be856ef00&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  user:
    properties:
      email:
        type: string
        format: email
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>