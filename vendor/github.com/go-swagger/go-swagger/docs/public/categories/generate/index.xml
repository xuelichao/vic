<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generate on go-swagger toolkit</title>
    <link>//goswagger.io/categories/generate/</link>
    <description>Recent content in Generate on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 go-swagger contributors</copyright>
    <lastBuildDate>Mon, 09 Nov 2015 18:58:47 -0800</lastBuildDate>
    <atom:link href="//goswagger.io/categories/generate/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>swagger.json generation</title>
      <link>//goswagger.io/generate/spec/</link>
      <pubDate>Mon, 09 Nov 2015 18:58:47 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a swagger spec document from your code.
The command integrates with go doc comments, and makes use of structs when it needs to know of
types.&lt;/p&gt;

&lt;p&gt;Based on the work from &lt;a href=&#34;https://github.com/yvasiyarov/swagger&#34;&gt;https://github.com/yvasiyarov/swagger&lt;/a&gt;&lt;br /&gt;
It uses a similar approach but with expanded annotations and it produces a swagger 2.0 spec.&lt;/p&gt;

&lt;p&gt;The goal of the syntax is to make it look as a natural part of the documentation for the application code.&lt;/p&gt;

&lt;p&gt;The generator is passed a main package and it uses that to discover all the code in use.
To do this it makes use of go&amp;rsquo;s loader package. The same package that is used by tools like goimports to discover which files to format.&lt;/p&gt;

&lt;p&gt;Once the parser has encountered a comment that matches on of its known tags, the parser will assume that the rest of the comment block is for swagger.&lt;/p&gt;

&lt;h3 id=&#34;usage:958e7270f96f5407d7d980f500805b1b&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;To generate a spec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate spec -o ./swagger.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You give it a main file and it will parse all the files that are reachable by that main
package to produce a swagger specification.&lt;/p&gt;

&lt;p&gt;To use you can add a go:generate comment to your main file for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//go:generate swagger generate spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command requires a main package or file and it wants your code to compile. It uses the go tools loader to load an application and then scans all the packages that are in use by the code base.
This means that for something to be discoverable it needs to be reachable by a code path triggered through the main package.&lt;/p&gt;

&lt;p&gt;If an annotation is not yet supported or you want to merge with a pre-existing spec, you can use the -i parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate spec -i ./swagger.yml -o ./swagger.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea is that there are certain things that are more easily expressed by just using yaml, to&lt;/p&gt;

&lt;h4 id=&#34;parsing-rules:958e7270f96f5407d7d980f500805b1b&#34;&gt;Parsing rules&lt;/h4&gt;

&lt;p&gt;&lt;img class=&#34;emoji&#34; title=&#34;:warning&#34; alt=&#34;:warning&#34; src=&#34;https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png?v5&#34; width=&#34;20&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; /&gt;This command relies heavily on the way godoc works. &lt;img class=&#34;emoji&#34; title=&#34;:warning&#34; alt=&#34;:warning&#34; src=&#34;https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png?v5&#34; width=&#34;20&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This means you should be very aware of all the things godoc supports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/godoc-documenting-go-code&#34;&gt;godoc documenting go code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/go/doc/#ToHTML&#34;&gt;godoc ToHTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#commentary&#34;&gt;commenting go effectively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/godoc&#34;&gt;godoc documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Single page which documents all the currently supported godoc rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/fluhus/godoc-tricks&#34;&gt;godoc tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The generated code tries to avoid golint errors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;go lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;go lint style guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When an object has a title and a description field, it will use the go rules to parse those. So the first line of the
comment block will become the title, or a header when rendered as godoc. The rest of the comment block will be treated
as description up to either the end of the comment block, or a line that starts with a known annotation.&lt;/p&gt;

&lt;h4 id=&#34;annotation-syntax:958e7270f96f5407d7d980f500805b1b&#34;&gt;Annotation syntax&lt;/h4&gt;

&lt;p&gt;If you want to exclude something from the spec generation process you can try with the struct tag: &lt;code&gt;json:&amp;quot;-&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are several annotations that mark a comment block as a participant for the swagger spec.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;meta&#34;&gt;swagger:meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;route&#34;&gt;swagger:route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;params&#34;&gt;swagger:parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;response&#34;&gt;swagger:response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;model&#34;&gt;swagger:model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;allOf&#34;&gt;swagger:allOf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;strfmt&#34;&gt;swagger:strfmt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;discriminated&#34;&gt;swagger:discriminated&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;embedded-types:958e7270f96f5407d7d980f500805b1b&#34;&gt;Embedded types&lt;/h4&gt;

&lt;p&gt;For the embedded schemas there are a set of rules for the spec generator to vary the definition it generates.&lt;br /&gt;
When an embedded type isn&amp;rsquo;t decorated with the &lt;code&gt;swagger:allOf&lt;/code&gt; annotation, then the properties from the embedded value will be included in the generated definition as if they were defined on the definition. But when the embedded type is decorated with the &lt;code&gt;swagger:allOf&lt;/code&gt; annotation then the all of element will be defined as a &amp;ldquo;$ref&amp;rdquo; property instead. For an annotated type there is also the possibility to specify an argument, the value of this argument will be used as the value for the &lt;code&gt;x-class&lt;/code&gt; extension. This allows for generators that support the
&lt;code&gt;x-class&lt;/code&gt; extension to reliably build a serializer for a type with a discriminator&lt;/p&gt;

&lt;h4 id=&#34;known-vendor-extensions:958e7270f96f5407d7d980f500805b1b&#34;&gt;Known vendor extensions&lt;/h4&gt;

&lt;p&gt;There are a couple of commonly used vendor extensions that most frameworks support to add functionality to the swagger spec.&lt;/p&gt;

&lt;p&gt;For generating a swagger specification document this toolkit supports:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Vendor extension&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x-isnullable&lt;/td&gt;
&lt;td&gt;makes a property value nullable, for go code that means a pointer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;x-nullable&lt;/td&gt;
&lt;td&gt;makes a property value nullable, for go code that means a pointer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;x-go-name&lt;/td&gt;
&lt;td&gt;the go name of a type&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;x-go-package&lt;/td&gt;
&lt;td&gt;the go package of a type&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;x-class&lt;/td&gt;
&lt;td&gt;this is used in conjunction with discriminators to give a full type name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Generate an API client</title>
      <link>//goswagger.io/generate/client/</link>
      <pubDate>Fri, 23 Oct 2015 22:11:54 -0700</pubDate>
      
      <guid>//goswagger.io/generate/client/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a client.&lt;/p&gt;

&lt;h2 id=&#34;usage:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;There is an example client in &lt;a href=&#34;https://github.com/go-swagger/go-swagger/tree/master/examples/todo-list/client&#34;&gt;https://github.com/go-swagger/go-swagger/tree/master/examples/todo-list/client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To generate a client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate client -f [http-url|filepath] -A [application-name] [--principal [principal-name]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to debug what the client is sending and receiving you can set the environment value DEBUG to a non-empty
value.&lt;/p&gt;

&lt;p&gt;Use a default client, which has an HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {

  // make the request to get all items
  resp, err := apiclient.Default.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client runtime allows for a number of &lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#Runtime&#34;&gt;configuration
options&lt;/a&gt; to be set.&lt;br /&gt;
To then use the client, and override the host, with a HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;https://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/todo-list/swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the transport
  transport := httptransport.New(doc)
  // configure the host
  if os.Getenv(&amp;quot;TODOLIST_HOST&amp;quot;) != &amp;quot;&amp;quot; {
    transport.Host = os.Getenv(&amp;quot;TODOLIST_HOST&amp;quot;)
  }

  // create the API client, with the transport
  client := apiclient.New(transport, strfmt.Default)

  // to override the host for the default client
  // apiclient.Default.SetTransport(transport)

  // make the request to get all items
  resp, err := client.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;authentication:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;The client supports 3 authentication schemes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#BasicAuth&#34;&gt;Basic Auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#APIKeyAuth&#34;&gt;API key auth in header or query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#BearerToken&#34;&gt;Bearer token header for oauth2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;./swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the API client
  client := apiclient.New(httptransport.New(doc), strfmt.Default)

  // make the authenticated request to get all items
  bearerTokenAuth := httptransport.BearerToken(os.Getenv(&amp;quot;API_ACCESS_TOKEN&amp;quot;))
  // basicAuth := httptransport.BasicAuth(os.Getenv(&amp;quot;API_USER&amp;quot;), os.Getenv(&amp;quot;API_PASSWORD&amp;quot;))
  // apiKeyQueryAuth := httptransport.APIKeyAuth(&amp;quot;apiKey&amp;quot;, &amp;quot;query&amp;quot;, os.Getenv(&amp;quot;API_KEY&amp;quot;))
  // apiKeyHeaderAuth := httptransport.APIKeyAuth(&amp;quot;X-API-TOKEN&amp;quot;, &amp;quot;header&amp;quot;, os.Getenv(&amp;quot;API_KEY&amp;quot;))
  resp, err := client.Operations.All(operations.AllParams{}, bearerTokenAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, basicAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyQueryAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyHeaderAuth)
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Use custom tempaltes</title>
      <link>//goswagger.io/generate/templates/</link>
      <pubDate>Tue, 26 Jan 2016 19:32:00 -0500</pubDate>
      
      <guid>//goswagger.io/generate/templates/</guid>
      <description>

&lt;p&gt;When generating a server or client you can specify a directory to load custom templates from
with &lt;code&gt;--template-dir&lt;/code&gt;. It will recursively read all the &lt;code&gt;.gotmpl&lt;/code&gt; files in the directory and
load them as templates.&lt;/p&gt;

&lt;p&gt;Each file will be loaded and define a template named the same as the file without the suffix. If
the file is in a subdirectory the directory name will be included in the template name and the
first character of the next path segment will be uppercased. e.g.
 - template.gotmpl -&amp;gt; template
 - server/test.gotmpl -&amp;gt; serverTest&lt;/p&gt;

&lt;p&gt;You can override the following templates. Check go-swagger/generator/templates for the default
definitions.&lt;/p&gt;

&lt;h1 id=&#34;available-templates:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;Available Templates:&lt;/h1&gt;

&lt;h1 id=&#34;client-templates:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;Client Templates&lt;/h1&gt;

&lt;h2 id=&#34;clientfacade:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;clientFacade&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;client/facade.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;clientparameter:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;clientParameter&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;client/parameter.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;clientresponse:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;clientResponse&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;client/response.gotmpl&lt;/code&gt;
####requires
 - clientresponse
 - schema
 - docstring&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;clientresponse-1:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;clientresponse&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;client/response.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;clientclient:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;clientClient&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;client/client.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;server-templates:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;Server Templates&lt;/h1&gt;

&lt;h2 id=&#34;serverparameter:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverParameter&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/parameter.gotmpl&lt;/code&gt;
####requires
 - propertyparamvalidator
 - sliceparambinder&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sliceparamvalidator:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;sliceparamvalidator&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/parameter.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;serverresponses:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverResponses&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/responses.gotmpl&lt;/code&gt;
####requires
 - serverresponse&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sliceparambinder:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;sliceparambinder&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/parameter.gotmpl&lt;/code&gt;
####requires
 - propertyparamvalidator
 - sliceparambinder&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;serverresponse:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverresponse&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/responses.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;serveroperation:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverOperation&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/operation.gotmpl&lt;/code&gt;
####requires
 - schema
 - docstring&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;propertyparamvalidator:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;propertyparamvalidator&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/parameter.gotmpl&lt;/code&gt;
####requires
 - validationPrimitive
 - sliceparamvalidator&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;servermain:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverMain&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/main.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;bindprimitiveparam:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;bindprimitiveparam&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/parameter.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;serverconfigureapi:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverConfigureapi&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/configureapi.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;serverbuilder:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverBuilder&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/builder.gotmpl&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;serverdoc:9052f6ca659538a7ad23c7f4f43faadc&#34;&gt;serverDoc&lt;/h2&gt;

&lt;p&gt;Defined in &lt;code&gt;server/doc.gotmpl&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generate a server for a swagger spec</title>
      <link>//goswagger.io/generate/server/</link>
      <pubDate>Sun, 22 Nov 2015 23:19:15 -0800</pubDate>
      
      <guid>//goswagger.io/generate/server/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a docker friendly server with support for TLS.
You can configure it through environment variables that are commonly used on PaaS services.&lt;/p&gt;

&lt;p&gt;A generated server uses &lt;em&gt;no reflection&lt;/em&gt; except for an enum validation and the required validation. The server builds all the necessary plans and execution paths at startup time so that at runtime there is only the absolute minimum processing required to respond to requests.&lt;/p&gt;

&lt;p&gt;The default router for go-swagger is &lt;a href=&#34;https://github.com/naoina/denco&#34;&gt;naoina&amp;rsquo;s denco&lt;/a&gt; which is a &lt;a href=&#34;https://github.com/julienschmidt/go-http-routing-benchmark#github&#34;&gt;&lt;strong&gt;very&lt;/strong&gt; fast&lt;/a&gt; ternary search tree based router that allows for much greater flexibility than the trie based router implementation of julienschmidt at almost the same and sometimes lower cost.&lt;/p&gt;

&lt;p&gt;You can provide your own router implementation should you so desire it&amp;rsquo;s abstracted through an interface with this use case in mind.&lt;/p&gt;

&lt;h5 id=&#34;usage:3c3fb84840715ff4411349984ebc0a77&#34;&gt;Usage&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger generate server [server-OPTIONS]

[server command options]
      -f, --spec=            the spec file to use (default: ./swagger.json)
      -a, --api-package=     the package to save the operations (default: operations)
      -m, --model-package=   the package to save the models (default: models)
      -s, --server-package=  the package to save the server specific code (default: restapi)
      -c, --client-package=  the package to save the client specific code (default: client)
      -t, --target=          the base directory for generating the files (default: ./)
      -A, --name=            the name of the application, defaults to a mangled value of info.title
      -O, --operation=       specify an operation to include, repeat for multiple
          --tags=            the tags to include, if not specified defaults to all
      -P, --principal=       the model to use for the security principal
          --default-scheme=  the default scheme for this API (default: http)
      -M, --model=           specify a model to include, repeat for multiple
          --skip-models      no models will be generated when this flag is specified
          --skip-operations  no operations will be generated when this flag is specified
          --skip-support     no supporting files will be generated when this flag is specified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server application gets generated with all the handlers stubbed out with a not implemented handler. That means that you can start the API server immediately after generating it. It will respond to all valid requests with 501 Not Implemented. When a request is invalid it will most likely respond with an appropriate 4xx response.&lt;/p&gt;

&lt;p&gt;The generated server allows for a number of command line parameters to customize it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--host=            the IP to listen on (default: localhost) [$HOST]
--port=            the port to listen on for insecure connections, defaults to a random value [$PORT]
--tls-host=        the IP to listen on for tls, when not specified it&#39;s the same as --host [$TLS_HOST]
--tls-port=        the port to listen on for secure connections, defaults to a random value [$TLS_PORT]
--tls-certificate= the certificate to use for secure connections [$TLS_CERTIFICATE]
--tls-key=         the private key to use for secure conections [$TLS_PRIVATE_KEY]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server takes care of a number of things when a request arrives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;routing&lt;/li&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;li&gt;input validation&lt;/li&gt;
&lt;li&gt;content negotiation&lt;/li&gt;
&lt;li&gt;parameter and body binding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate this with a pseudo handler, this is what happens in a request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;net/http&amp;quot;

  &amp;quot;github.com/go-swagger/go-swagger/errors&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/httpkit/middleware&amp;quot;
  &amp;quot;github.com/gorilla/context&amp;quot;
)

func newCompleteMiddleware(ctx *middleware.Context) http.Handler {
  return http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {
    defer context.Clear(r)

    // use context to lookup routes
    if matched, ok := ctx.RouteInfo(r); ok {

      if len(matched.Authenticators) &amp;gt; 0 {
        if _, err := ctx.Authorize(r, matched); err != nil {
          ctx.Respond(rw, r, matched.Produces, matched, err)
          return
        }
      }

      bound, validation := ctx.BindAndValidate(r, matched)
      if validation != nil {
        ctx.Respond(rw, r, matched.Produces, matched, validation)
        return
      }

      result, err := matched.Handler.Handle(bound)
      if err != nil {
        ctx.Respond(rw, r, matched.Produces, matched, err)
        return
      }

      ctx.Respond(rw, r, matched.Produces, matched, result)
      return
    }

    // Not found, check if it exists in the other methods first
    if others := ctx.AllowedMethods(r); len(others) &amp;gt; 0 {
      ctx.Respond(rw, r, ctx.spec.RequiredProduces(), nil, errors.MethodNotAllowed(r.Method, others))
      return
    }
    ctx.Respond(rw, r, ctx.spec.RequiredProduces(), nil, errors.NotFound(&amp;quot;path %s was not found&amp;quot;, r.URL.Path))
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prior to handling requests however you probably want to configure the API with some actual implementations.  To do that you have to edit the configure_xxx_api.go file.  That file will only be generated the first time you generate a server application from a swagger spec. So the generated server uses this file to let you fill in the blanks.&lt;/p&gt;

&lt;p&gt;For the todolist application that file looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;github.com/go-swagger/go-swagger/errors&amp;quot;
	&amp;quot;github.com/go-swagger/go-swagger/httpkit&amp;quot;
	&amp;quot;github.com/go-swagger/go-swagger/httpkit/middleware&amp;quot;

	&amp;quot;github.com/go-swagger/go-swagger/examples/todo-list/restapi/operations&amp;quot;
	&amp;quot;github.com/go-swagger/go-swagger/examples/todo-list/restapi/operations/todos&amp;quot;
)

// This file is safe to edit. Once it exists it will not be overwritten

func configureAPI(api *operations.ToDoListAPI) http.Handler {
	// configure the api here
	api.JSONConsumer = httpkit.JSONConsumer()

	api.JSONProducer = httpkit.JSONProducer()

	api.KeyAuth = func(token string) (interface{}, error) {
		return nil, errors.NotImplemented(&amp;quot;api key auth (key) x-petstore-token from header has not yet been implemented&amp;quot;)
	}

	api.AddOneHandler = todos.AddOneHandlerFunc(func(params todos.AddOneParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented(&amp;quot;operation addOne has not yet been implemented&amp;quot;)
	})
	api.DestroyOneHandler = todos.DestroyOneHandlerFunc(func(params todos.DestroyOneParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented(&amp;quot;operation destroyOne has not yet been implemented&amp;quot;)
	})
	api.FindHandler = todos.FindHandlerFunc(func(params todos.FindParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented(&amp;quot;operation find has not yet been implemented&amp;quot;)
	})
	api.UpdateOneHandler = todos.UpdateOneHandlerFunc(func(params todos.UpdateOneParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented(&amp;quot;operation updateOne has not yet been implemented&amp;quot;)
	})

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you look at the code for the configureAPI method then you&amp;rsquo;ll notice that the api object has properties for consumers.
A consumer is an object that can marshal things from a wireformat to an object.  Consumers and their counterpart producers who write objects get their names generated from the consumes and produces properties on a swagger specification.&lt;/p&gt;

&lt;p&gt;The interface definitions for consumers and producers look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ConsumerFunc represents a function that can be used as a consumer
type ConsumerFunc func(io.Reader, interface{}) error

// Consume consumes the reader into the data parameter
func (fn ConsumerFunc) Consume(reader io.Reader, data interface{}) error {
	return fn(reader, data)
}

// Consumer implementations know how to bind the values on the provided interface to
// data provided by the request body
type Consumer interface {
	// Consume performs the binding of request values
	Consume(io.Reader, interface{}) error
}

// ProducerFunc represents a function that can be used as a producer
type ProducerFunc func(io.Writer, interface{}) error

// Produce produces the response for the provided data
func (f ProducerFunc) Produce(writer io.Writer, data interface{}) error {
	return f(writer, data)
}

// Producer implementations know how to turn the provided interface into a valid
// HTTP response
type Producer interface {
	// Produce writes to the http response
	Produce(io.Writer, interface{}) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it&amp;rsquo;s something that can turn a reader into a hydrated interface. A producer is the counterpart of a consumer and writes objects to an io.Writer.  When you configure an api with those you make sure it can marshal the types for the supported content types.&lt;/p&gt;

&lt;p&gt;The next thing that happens in the configureAPI method is setting up the authentication with a stub handler in this case. This particular swagger specification supports token based authentication and as such it wants you to configure a token auth handler.  Any error for an authentication handler is assumed to be an invalid authentication and will return the 401 status code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// UserPassAuthentication authentication function
type UserPassAuthentication func(string, string) (interface{}, error)

// TokenAuthentication authentication function
type TokenAuthentication func(string) (interface{}, error)

// AuthenticatorFunc turns a function into an authenticator
type AuthenticatorFunc func(interface{}) (bool, interface{}, error)

// Authenticate authenticates the request with the provided data
func (f AuthenticatorFunc) Authenticate(params interface{}) (bool, interface{}, error) {
	return f(params)
}

// Authenticator represents an authentication strategy
// implementations of Authenticator know how to authenticate the
// request data and translate that into a valid principal object or an error
type Authenticator interface {
	Authenticate(interface{}) (bool, interface{}, error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we finally get to configuring our route handlers. For each operation there exists an interface so that implementations have some freedom to provide alternative implentations. For example mocks in certain tests, automatic stubbing handlers, not implemented handlers. Let&amp;rsquo;s look at the addOne handler in a bit more detail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// AddOneHandlerFunc turns a function with the right signature into a add one handler
type AddOneHandlerFunc func(AddOneParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn AddOneHandlerFunc) Handle(params AddOneParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// AddOneHandler interface for that can handle valid add one params
type AddOneHandler interface {
	Handle(AddOneParams, interface{}) middleware.Responder
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the &lt;code&gt;addOne&lt;/code&gt; operation requires authentication, this interface definition requires 2 arguments. The first argument is about the request parameters and the second parameter is the security principal for the request.  In this case it is of type &lt;code&gt;interface{}&lt;/code&gt;, typically that is a type like Account, User, Session, &amp;hellip;&lt;/p&gt;

&lt;p&gt;It is your job to provide such a handler. Go swagger guarantees that by the time the request processing ends up at the handler, the parameters and security principal have been bound and validated.  So you can safely proceed with saving the request body to some persistence medium perhaps.&lt;/p&gt;

&lt;p&gt;There is a context that gets created where the handlers get wired up into a &lt;code&gt;http.Handler&lt;/code&gt;. For the add one this looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// NewAddOne creates a new http.Handler for the add one operation
func NewAddOne(ctx *middleware.Context, handler AddOneHandler) *AddOne {
	return &amp;amp;AddOne{Context: ctx, Handler: handler}
}

/*AddOne swagger:route POST / todos addOne

AddOne add one API

*/
type AddOne struct {
	Context *middleware.Context
	Params  AddOneParams
	Handler AddOneHandler
}

func (o *AddOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &amp;amp;o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;http.Handler&lt;/code&gt; implementation takes care of authentication, binding, user code execution and generating a response. For authentication this request would end up in the &lt;code&gt;TokenAuthentication&lt;/code&gt; handler that was put on the api context object earlier.  When a request is authenticated it gets bound. This operation eventually requires an object that is an implementation of &lt;code&gt;RequestBinder&lt;/code&gt;.  The &lt;code&gt;AddOneParams&lt;/code&gt; are such an implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// RequestBinder is an interface for types to implement
// when they want to be able to bind from a request
type RequestBinder interface {
	BindRequest(*http.Request, *MatchedRoute) error
}

// AddOneParams contains all the bound params for the add one operation
// typically these are obtained from a http.Request
//
// swagger:parameters addOne
type AddOneParams struct {
	/*
	  In: body
	*/
	Body *models.Item
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *AddOneParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	var body models.Item
	if err := route.Consumer.Consume(r.Body, &amp;amp;body); err != nil {
		res = append(res, errors.NewParseError(&amp;quot;body&amp;quot;, &amp;quot;body&amp;quot;, &amp;quot;&amp;quot;, err))
	} else {
		if err := body.Validate(route.Formats); err != nil {
			res = append(res, err)
		}

		if len(res) == 0 {
			o.Body = &amp;amp;body
		}
	}

	if len(res) &amp;gt; 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example there is only a body parameter, so we make use of the selected consumer to read the request body and turn it into an instance of models.Item. When the body parameter is bound, it gets validated and when validation passes no error is returned and the body property is set.  After a request is bound and validated the parameters and security principal are passed to the request handler. For this configuration that would return a 501 responder.&lt;/p&gt;

&lt;p&gt;Go swagger uses responders which are an interface implementation for things that can write to a response. For the generated server there are status code response and a default response object generated for every entry in the spec. For the &lt;code&gt;addOne&lt;/code&gt; operation that are 2 objects one for the success case (201) and one for an error (default).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Responder is an interface for types to implement
// when they want to be considered for writing HTTP responses
type Responder interface {
	WriteResponse(http.ResponseWriter, httpkit.Producer)
}

/*AddOneCreated Created

swagger:response addOneCreated
*/
type AddOneCreated struct {

	// In: body
	Payload *models.Item `json:&amp;quot;body,omitempty&amp;quot;`
}

// WriteResponse to the client
func (o *AddOneCreated) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddOneDefault error

swagger:response addOneDefault
*/
type AddOneDefault struct {

	// In: body
	Payload *models.Error `json:&amp;quot;body,omitempty&amp;quot;`
}

// WriteResponse to the client
func (o *AddOneDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So an implementer of the &lt;code&gt;AddOneHandler&lt;/code&gt; could return one of these 2 objects and go-swagger is able to respect the contract set forward by the spec document.&lt;/p&gt;

&lt;p&gt;So to implement the AddOneHandler you could do something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;todos.AddOneHandlerFunc(func(params todos.AddOneParams, principal interface{}) middleware.Responder {
  created, err := database.Save(params.Body)
  if err != nil {
    return AddOneDefault{models.Error{500, err.Error()}}
  }
  return AddOneCreated{created}
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>