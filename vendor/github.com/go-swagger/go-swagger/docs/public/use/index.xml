<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uses on go-swagger toolkit</title>
    <link>//goswagger.io/use/</link>
    <description>Recent content in Uses on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 go-swagger contributors</copyright>
    <lastBuildDate>Wed, 23 Dec 2015 07:44:06 -0800</lastBuildDate>
    <atom:link href="//goswagger.io/use/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use the generated server</title>
      <link>//goswagger.io/use/server/</link>
      <pubDate>Wed, 23 Dec 2015 07:44:06 -0800</pubDate>
      
      <guid>//goswagger.io/use/server/</guid>
      <description>

&lt;p&gt;The generated server serves the API but the default implementation returns 501 Not implemented for everything. Let&amp;rsquo;s
look into using the generated code.&lt;/p&gt;

&lt;p&gt;Go swagger primarily deals with HTTP and originally only supports the stdlib &lt;code&gt;net/http&lt;/code&gt; interface. A typical HTTP
request expects a response.  This is reflected in go-swagger where a handler is typically defined as a function of
input parameters to a responder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ListTravelsHandler interface {
	Handle(ListTravelsParams) middleware.Responder
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The signature of this handler is one of 2 possible variations. When a handler doesn&amp;rsquo;t use authentication then a handler
interface consists out of input parameters and a responder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type AddOneAuthenticatedHandler interface {
	Handle(AddOneParams, interface{}) middleware.Responder
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a handler does use authentication then the second argument to the handler function represents the security
principal for your application. You can specify the type name for this principal at generation time by specifying the
-P or &amp;ndash;principal flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;swagger generate server -P models.User
swagger generate client -P models.User
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you would execute the generate step with that parameter for the security principal then the
AddOneAuthenticatedHandler would look a bit like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type AddOneAuthenticatedHandler interface {
	Handle(AddOneParams, *models.User) middleware.Responder
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;implement-handlers:3c3fb84840715ff4411349984ebc0a77&#34;&gt;Implement handlers&lt;/h2&gt;

&lt;p&gt;A handler is an interface/contract that defines a statically typed representation of the input and output parameters of
an operation on your API.
The tool generates handlers that are stubbed with a NotImplemented response when you first generate the server.&lt;/p&gt;

&lt;h3 id=&#34;the-not-implemented-handler:3c3fb84840715ff4411349984ebc0a77&#34;&gt;The not implemented handler&lt;/h3&gt;

&lt;p&gt;The not implemented handler is actually a not implemented responder, it returns a responder that will always respond
with status code 501 and a message that lets people know it&amp;rsquo;s not the fault of the client that things don&amp;rsquo;t work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;middleware.NotImplemented(&amp;quot;operation todos.AddOne has not yet been implemented&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;your-own-code:3c3fb84840715ff4411349984ebc0a77&#34;&gt;Your own code&lt;/h3&gt;

&lt;p&gt;Each HTTP request expects a response of some sort, this response might have no data but it&amp;rsquo;s a response none the less.&lt;/p&gt;

&lt;p&gt;Every incoming request is described as a bunch of input parameters which have been validated prior to calling the
handler. So whenever your code is executed, the input parameters are guaranteed to be valid according to what the
swagger specification prescribes.&lt;/p&gt;

&lt;p&gt;All the input parameters have been validated, and the request has been authenticated should it have triggered
authentication.&lt;/p&gt;

&lt;p&gt;You probably want to return something a bit more useful to the users of your API than a not implemented response.&lt;/p&gt;

&lt;p&gt;A possible implementation of the &lt;code&gt;ListTravelsHandler&lt;/code&gt; interface might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type PublicListTravelsOK struct {
  Body []models.Travel
}
func (m *PublicListTravelsOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer){
  // generated code here
}

type PublicListTravelsError struct {
  Body models.Error
}
func (m *PublicListTravelsOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer){
  // generated code here
}

type PublicListTravelsHandler struct {
  db interface {
    FetchTravels(*PublicListTravelsParams) ([]models.Travel, error)
  }
}

func (m *PublicListTravelsHandler) Handle(params ListTravelsParams) middleware.Responder {
  travels, err := m.db.FetchTravels(&amp;amp;params)
  if err != nil {
    return &amp;amp;PublicListTravelsError{Body: models.Error{Message: err.Error()}}
  }
  return &amp;amp;PublicListTravelsOK{Body: travels}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above we have a handler implementation with a hypothetical database fetch interface. When the handle
method is executed there are 2 possible responses for the provided parameters. There can either be an error in which
case the PublicListTravelsError will be returned, otherwise the PublicListTravelsOK will be returned.&lt;/p&gt;

&lt;p&gt;The code generator has written the remaining code to render that response with the headers etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BYO middleware</title>
      <link>//goswagger.io/use/middleware/</link>
      <pubDate>Sat, 26 Dec 2015 15:39:37 -0800</pubDate>
      
      <guid>//goswagger.io/use/middleware/</guid>
      <description>

&lt;p&gt;Go-swagger chose the golang &lt;code&gt;net/http&lt;/code&gt; package as base abstraction. That means that for &lt;em&gt;any&lt;/em&gt; supported transport by the toolkit you can reuse &lt;em&gt;any&lt;/em&gt; middleware existing middlewares that following the stdlib middlware pattern.&lt;/p&gt;

&lt;p&gt;There are several projects providing middleware libraries for weaving all kinds of functionality into your request handling. None of those things are the job of go-swagger, go-swagger just serves your specs.&lt;/p&gt;

&lt;p&gt;The server takes care of a number of things when a request arrives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;routing&lt;/li&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;li&gt;input validation&lt;/li&gt;
&lt;li&gt;content negotiation&lt;/li&gt;
&lt;li&gt;parameter and body binding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re unfamiliar with the concept of golang net/http middlewares you can read up on it here:&lt;br /&gt;
&lt;a href=&#34;http://www.alexedwards.net/blog/making-and-using-middleware&#34;&gt;Making and Using HTTP Middleware&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides serving the swagger specification as an API, the toolkit also serves the actual swagger specification document.
The convention is to use the &lt;code&gt;/swagger.json&lt;/code&gt; location for serving up the specification document, so we serve the
specification at that path.&lt;/p&gt;

&lt;h3 id=&#34;add-middleware:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Add middleware&lt;/h3&gt;

&lt;p&gt;The generated server allows for 2 extension points to inject middleware in its middlware chain. These have to do with
the lifecycle of a request. You can find those hooks in the configure_xxx_api.go file.&lt;/p&gt;

&lt;p&gt;The first one is to add middleware all the way to the top of the middleware stack. To do this you add them in the
&lt;code&gt;setupGlobalMiddleware&lt;/code&gt; method. This middleware applies to everything in the go-swagger managed API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second extension point allows for middleware to be injected right before actually handling a matched request.
This excludes the swagger.json document from being affected by this middlware though.  This extension point makes the
middlewares execute right after routing but right before authentication, binding and validation.  You add middlewares
to this point by editing the &lt;code&gt;setupMiddlewares&lt;/code&gt; method in configure_xxx_api.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The global middleware is an excellent place to do things like panic handling, request logging or adding metrics.  While
the plain middleware allows you to kind of filter this by request path without having to take care of routing. You also
get access to the full context that the go-swagger toolkit uses throughout the lifecycle of a request.&lt;/p&gt;

&lt;h4 id=&#34;add-logging-and-panic-handling:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Add logging and panic handling&lt;/h4&gt;

&lt;p&gt;A very common requirement for HTTP API&amp;rsquo;s is to include some form of logging. Another one is to handle panics from your
API requests.  The example for a possible implementation of this uses &lt;a href=&#34;https://github.com/dre1080/recover&#34;&gt;this community provided
middleware&lt;/a&gt; to catch panics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func setupGlobalMiddleware(handler http.Handler) http.Handler {
  recovery := recover.New(&amp;amp;recover.Options{
    Log: log.Print,
  })
  return recovery(handler)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are tons of middlewares out there, some are framework specific and some frameworks don&amp;rsquo;t really use the plain
vanilla golang net/http as base abstraction. For those you can use a project like &lt;a href=&#34;https://github.com/carbocation/interpose&#34;&gt;interpose&lt;/a&gt; that serves as an adapter
layer so you can still reuse middlewares. Of course nobody is stopping you to just implement your own middlewares.&lt;/p&gt;

&lt;p&gt;For example using interpose to integrate with &lt;a href=&#34;https://github.com/carbocation/interpose/blob/master/middleware/negronilogrus.go&#34;&gt;logrus&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  interpose &amp;quot;github.com/carbocation/interpose/middleware&amp;quot;
)
func setupGlobalMiddleware(handler http.Handler) http.Handler {
  logViaLogrus := interpose.NegroniLogrus()
  return logViaLogrus(handler)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can compose these middlewares into a stack using functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func setupGlobalMiddleware(handler http.Handler) http.Handler {
  handlePanic := recover.New(&amp;amp;recover.Options{
    Log: log.Print,
  })

  logViaLogrus := interpose.NegroniLogrus()

  return handlePanic(
    logViaLogrus(
      handler
    )
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;add-rate-limiting:37ab2f15ff048f67959bcac0a6032f32&#34;&gt;Add rate limiting&lt;/h4&gt;

&lt;p&gt;You can also add rate limiting in a similar way. Lets say we just want to rate limit the valid requests to our swagger
API. To do so we could use &lt;a href=&#34;https://github.com/didip/tollbooth&#34;&gt;tollbooth&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func setupMiddlewares(handler http.Handler) http.Handler {
  limiter := tollbooth.NewLimiter(1, time.Second)
  limiter.IPLookups = []string{&amp;quot;RemoteAddr&amp;quot;, &amp;quot;X-Forwarded-For&amp;quot;, &amp;quot;X-Real-IP&amp;quot;}
	return tollbooth.LimitFuncHandler(handler)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with this you&amp;rsquo;ve added rate limitting to your application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schema generation rules</title>
      <link>//goswagger.io/use/schemas/</link>
      <pubDate>Sat, 26 Dec 2015 15:39:43 -0800</pubDate>
      
      <guid>//goswagger.io/use/schemas/</guid>
      <description>

&lt;p&gt;Lots of the work of go-swagger is to generate models, which can have all kinds of rules like polymorphism and
validations.  Of course none of this is possible without set of rules and tradeoffs.&lt;/p&gt;

&lt;h3 id=&#34;about-schemas:176038017a790b96307b48b85dc07885&#34;&gt;About schemas&lt;/h3&gt;

&lt;p&gt;The general idea is that you should rarely see interface{} in the generated code.
You get a complete representation of a swagger document in somewhat idiomatic go.&lt;/p&gt;

&lt;p&gt;To do so there is set of mapping patterns that are applied to a spec to go types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defintion of primitive =&amp;gt; type alias/name&lt;/li&gt;
&lt;li&gt;defintion of array =&amp;gt; type alias/name&lt;/li&gt;
&lt;li&gt;definition of map =&amp;gt; type alias/name&lt;/li&gt;
&lt;li&gt;definition of object with properties =&amp;gt; struct&lt;/li&gt;
&lt;li&gt;definition of ref =&amp;gt; type alias/name&lt;/li&gt;
&lt;li&gt;object with only additional properties =&amp;gt; map[string]T&lt;/li&gt;
&lt;li&gt;object with additional properties and properties =&amp;gt; custom serializer&lt;/li&gt;
&lt;li&gt;schema with schema array in items =&amp;gt; tuple (struct with properties, custom serializer)&lt;/li&gt;
&lt;li&gt;schema with all of =&amp;gt; struct&lt;/li&gt;
&lt;li&gt;all of schema with ref =&amp;gt; embedded value&lt;/li&gt;
&lt;li&gt;all of schema with properties =&amp;gt; properties are included in struct&lt;/li&gt;
&lt;li&gt;adding an all of schema with just &amp;ldquo;x-isnullable&amp;rdquo;: true or &amp;ldquo;x-nullable&amp;rdquo;: true turns
the schema into a pointer when there are only other extension properties provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSONSchema and by extension swagger allow for items that have a fixed size array
with schema&amp;rsquo;s describing the items at each index. This can be combined with additional items
to form some kind of tuple with varargs.
To map this to go it creates a struct that has fixed names and a custom json serializer.&lt;/p&gt;

&lt;p&gt;The code that is generated also gets the doc comments that are used by the scanner
to generate a spec from go code. So that after generation you should be able to reverse
generate a spec from the code that was generated by your spec.&lt;/p&gt;

&lt;p&gt;It should be equivalent to the original spec but might miss some default values and examples.&lt;/p&gt;

&lt;h4 id=&#34;nullability:176038017a790b96307b48b85dc07885&#34;&gt;nullability&lt;/h4&gt;

&lt;p&gt;There are rules around what turns something into a pointer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;structs&lt;/li&gt;
&lt;li&gt;x-nullable, x-isnullable&lt;/li&gt;
&lt;li&gt;primitives where the zero value is valid but fail validation otherwise&lt;/li&gt;
&lt;li&gt;strings minLength &amp;gt; 0 or required results in non-pointer&lt;/li&gt;
&lt;li&gt;numbers min &amp;gt; 0, max &amp;lt; 0 and min &amp;lt; max&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>