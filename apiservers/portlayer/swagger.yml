# Copyright 2016 VMware, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

swagger: "2.0"
info:
  description: "Port Layer API"
  title: "Port Layer API"
  version: "v0.0.1"
produces:
- application/json
consumes:
- application/json
schemes:
- http
paths:
  /_ping:
    get:
      tags: ["misc"]
      operationId: Ping
      produces:
        - text/plain
      responses:
        '200':
          description: "OK"
          schema:
            type: string
  /storage:
    post:
      tags: ["storage"]
      operationId: CreateImageStore
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ImageStore"
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/StoreUrl"
        '409':
          description: "An image store with that name already exists."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /storage/{store_name}:
    parameters:
      - name: store_name
        type: string
        in: path
        required: true
    get:
      tags: ["storage"]
      operationId: ListImages
      parameters:
        - name: id
          type: string
          in: query
          collectionFormat: multi
      responses:
        '200':
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/Image"
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
           $ref: "#/definitions/Error"
  /storage/{store_name}/writeImage:
    post:
      tags: ["storage"]
      operationId: WriteImage
      consumes:
        - application/octet-stream
      parameters:
        - name: image_file
          in: body
          schema:
            type: string
            format: binary
        - name: store_name
          type: string
          in: path
          required: true
        - name: image_id
          type: string
          in: query
          required: true
        - name: parent_id
          type: string
          in: query
          required: true
        - name: sum
          type: string
          in: query
          required: true
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/Image"
        default:
          description: "error"
          schema:
           $ref: "#/definitions/Error"
  /storage/{store_name}/info/{id}:
    parameters:
      - name: store_name
        type: string
        in: path
        required: true
      - name: id
        type: string
        in: path
        required: true
    get:
      tags: ["storage"]
      operationId: GetImage
      responses:
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/Image"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /storage/{store_name}/tar/{id}:
    parameters:
      - name: store_name
        type: string
        in: path
        required: true
      - name: id
        type: string
        in: path
        required: true
    get:
      tags: ["storage"]
      operationId: GetImageTar
      responses:
        '404':
          description: "Not found"
        '200':
          description: "OK"
          schema:
            type: string
            format: binary
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  StoreUrl:
    type: object
    required:
      - url
    properties:
      code:
        type: integer
        format: int64
      url:
        type: string
  ImageStore:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  Image:
    type: object
    required:
      - ID
      - Store
    properties:
      ID:
        type: string
      SelfLink:
        type: string
      Parent:
        type: string
      Store:
        type: string
