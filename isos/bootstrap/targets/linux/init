#!/bin/sh

# mount the container rootfs
mount -t devtmpfs devtmpfs /dev

mkdir -p /dev/pts
mount -t devpts devpts /dev/pts

mount -t proc proc /proc
mount -t sysfs sysfs /sys

# create cgroupfs hierarchy
mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
for i in $(awk '!/^#/ { if ($4 == 1) print $1  }' /proc/cgroups); do
	mkdir -p /sys/fs/cgroup/$i
	mount -n -t cgroup -o $i cgroup /sys/fs/cgroup/$i
done

# skip udev daemon as we're not expecting hotplug behaviour - still here for the moment until we determine if it's needed for the network interface to appear
/sbin/udevd --daemon 2>&1 >/dev/null
/sbin/udevadm trigger --action=add 2>&1 >/dev/null &

modprobe loop 2>/dev/null

while [ ! -e /dev/rtc0 ]; do usleep 50000; done
hwclock --hctosys &

/sbin/ifconfig lo 127.0.0.1 up
/sbin/route add 127.0.0.1 lo &

# do we want to do this here, or after chroot?
/sbin/ldconfig 2>/dev/null

# do we want a swap file?

# do we need to set up a keymap or do we depend on the client to behave correctly?

# consider starting an ntp server, although ideally we'd do that out-of-band via paravirtualization of somekind

# no
/sbin/loadcpufreq 2>/dev/null &
/sbin/udevadm settle --timeout=5

# set ulimits - this should really be done in Go and in the tether, however Go doesn't seem to have
# the RLIMIT_XXX constants for all of them
for i in f t d s c m l p v w e r; do ulimit -$i unlimited;done
ulimit -n $(cat /proc/sys/fs/file-max)

# work around for non-forking "restart" - we have to skip this entire section if we're not the base template
#if [ "$(/sbin/rpctool -get forkState)" == "waiting" ]; then
	modprobe -r vmxnet3

	# tell the appliance that we're ready to fork
	#  /sbin/rpctool -set forkState ready"
	# block until the appliance approves the fork - no rush as this isn't fast path
	#  while [ "$(/sbin/rpctool -get forkState)" != "approved" ]; do sleep 1;done
	# confirm the instruction to fork
	#  /sbin/rpctool -set forkState committed

	# fork point for generic container on this image
	echo "Invoking VM Fork"
	/sbin/rpctool -fork
	echo "Refreshing clock and restoring network after fork"

	# refresh the current time
	# TODO: find a pv way to do this as this can take around 0.5s - so backgrouded
	hwclock --hctosys &

	# we reload this module after forking to pick up the new mac address
	modprobe vmxnet3 &

	# if we're vmforking here then we may need to rescan the scsi bus here
	echo "- - -" > /sys/class/scsi_host/host0/scan
#fi


# see if we should bail to the bootstrap or pivot into the container
# do this before the fork so we don't have a backdoor call in the hot path
# NOTE: this is moved after the fork during debugging so we can chose on a per VM basis
SHELL=`/sbin/rpctool -get bootstrap-shell 2>/dev/null`

# should switch this to inotify once we've tracked down the tcl package
echo "Waiting for rootfs"
while [ ! -e /dev/disk/by-label/containerfs ]; do :;done
if mount -t ext4 /dev/disk/by-label/containerfs /mnt/; then
	# make the required directory structure, but presume that something in the daemon
	# has done the *right* thing for /.tether* and created them where it won't show in a diff
	# we do this to ensure that subsequent commands don't fail if the daemon hasn't prepped
	# the structure
	mkdir -p /mnt/.tether /mnt/.tether-init

	# ensure that no matter what we have access to required devices
	# WARNING WARNING WARNING WARNING WARNING
	# if the tmpfs is not large enough odd hangs can occur and the ESX event log will
	# report the guest disabling the CPU
	mount -t tmpfs -o size=31m tmpfs /mnt/.tether/

	# when we're using /.tether/volumes this is needed to populate it - seems to be failing
	# in the latest container builds for no obvious reason (23/07/2015)
	#mkdir /mnt/.tether/volumes
	#udevadm trigger --type=devices --action=add --subsystem-match=scsi_disk &

	# if we don't have a populated init layer, pull from guestinfo
	if [ ! -f /mnt/.tether-init/docker-id ]; then
		mount -t tmpfs -o size=1m tmpfs /mnt/.tether-init/

		# TODO: check for "No such value" and do something sane if the guestinfo values aren't present
		/sbin/rpctool -get docker_id > /mnt/.tether-init/docker-id
		/sbin/rpctool -get init_key > /mnt/.tether-init/init_key

		# The container will start and connect without the following being correct, so error handling is easier
		/sbin/rpctool -get hostname > /mnt/.tether-init/hostname
		/sbin/rpctool -get resolv.conf > /mnt/.tether-init/resolv.conf
		echo "127.0.0.1 localhost localhost.localdomain" > /mnt/.tether-init/hosts

		# create the assumed structure
		# TODO: this cannot be in guest and still not show up in diffs
		mkdir -p /mnt/dev /mnt/proc /mnt/sys /mnt/etc
		ln -sf /proc/mounts /mnt/etc/mtab

		touch /mnt/etc/hostname && mount --bind /mnt/.tether-init/hostname /mnt/etc/hostname
		touch /mnt/etc/resolv.conf && mount --bind /mnt/.tether-init/resolv.conf /mnt/etc/resolv.conf
		touch /mnt/etc/hosts && mount --bind /mnt/.tether-init/hosts /mnt/etc/hosts
	fi

	# this is so we're not exposing the raw container disk if we wouldn't be otherwise
	rm -f /mnt/.tether/volumes/containerfs

	# set up the hostname
	if [ -f /mnt/etc/hostname ]; then
		/bin/hostname -F /mnt/etc/hostname
	else
		/bin/hostname -F /mnt/.tether-init/hostname
	fi

	# enable full system functionality in the container
	if [ -d /mnt/lib ]; then
		echo "Publishing modules within container"
		mkdir -p /mnt/lib/modules &&
		mount --bind /lib/modules /mnt/lib/modules
	fi

	# switch to the new root
	echo "prepping for switch to container filesystem"

	# ensure that we've got access to any label entries that were created before we mounted containerfs
	#cp -aL /dev/disk/by-label/* /mnt/.tether/volumes/
	# TODO: put a check in to see if we've got a name collision

	# these are for chroot/pivot root and shouldn't be called if using switch_root
	mount --rbind /dev /mnt/dev
	mount --bind /proc /mnt/proc
	mount --rbind /sys /mnt/sys

	# copy the init binary into the new root - ideally I'd run this purely from memory without a presence on the filesystem
	cp /bin/tether /vmfork.sh /mnt/.tether/

	# common path first - pivot into container filesystem
	if [ "$SHELL" != "true" ]; then
		# we should use pivot_root instead for /dev consistency. The follow is taken from the man page:
		echo "switching to the new mount"

		# rpctool
		cp /sbin/rpctool /mnt/.tether/

		# copy static busybox binary into /mnt/.tether/
		cp /bin/busybox.static /mnt/.tether/

		# need modprobe for renew mac address
		ln -s /.tether/busybox.static /mnt/.tether/modprobe

		# need for host networking support
		ln -s /.tether/busybox.static /mnt/.tether/udhcpc
		cp /etc/udhcpc/default.script /mnt/.tether/udhcpc.script
		chmod 755 /mnt/.tether/udhcpc.script

		# /mnt/.tether/udhcpc.script needs ifconfig and route
		ln -s /.tether/busybox.static /mnt/.tether/route
		ln -s /.tether/busybox.static /mnt/.tether/ifconfig

		# We don't want eth0 for --net=none passed
		if [ -d /sys/module/vmxnet3/ ] && [ $(cat /sys/class/net/eth0/address) == "ff:ff:ff:ff:ff:ff" ]; then
			modprobe -r vmxnet3
		fi

		exec chroot /mnt /.tether/tether 2>&1
		#exec switch_root /mnt/ /.tether/tetherd
	else
		# this is for when we want to interact directly with the container bootstrap environment
		ln -s /mnt/.tether-init /.tether-init

		mkdir /.tether/
		mount -t tmpfs -o size=5m tmpfs /.tether/
		echo "running tether in the bootstrap image (guestinfo.bootstrap-shell==true)"
		exec /bin/tether
	fi
else
	# TODO: what do we do here? we really need to somehow report an error
	# fail hard
	echo "Unable to chroot into container filesystem"
fi

# ensure that changes are flushed to disk before shutdown
sync
/sbin/poweroff

